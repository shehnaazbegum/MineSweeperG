import tkinter as tk
import random
class MineWindow:
    def __init__(self,title,no_of_cells,side,no_of_mines,height,right_position,top_position,on_game_end):
        self.title=title
        self.no_of_cells=no_of_cells
        self.side=side
        self.no_of_mines=no_of_mines
        self.height=height
        self.on_game_end=on_game_end
        self.root=tk.Tk()
        self.root.configure(bg="black")
        self.root.geometry(f'{side}x{height}+{right_position}+{top_position}')
        self.root.title(title)
        self.root.resizable(False,False)
        self.label=tk.Label(self.root,text=title,bg="white",anchor=tk.CENTER,height=40,font=("Arial", 16))
        self.label.place(x=0,y=0,width=side,height=40)
        self.button_height=(height-40)//no_of_cells
        self.button_width=side//no_of_cells
        self.button_frame=tk.Frame(self.root,bg="black")
        self.button_frame.place(x=0,y=40,width=side,height=height-40)
        self.buttons={}
        self.grid=[[0 for _ in range(no_of_cells)] for _ in range(no_of_cells)]
        self.marked_mines=set()
        self.create_buttons()
        self.place_mines()
        self.root.mainloop()
    def create_buttons(self):
        for row in range(self.no_of_cells):
            for col in range(self.no_of_cells):
                button=tk.Button(self.button_frame,bg="gray",width=self.button_width,height=self.button_height)
                button.grid(row=row,column=col,sticky="nsew")
                button.bind('<Button-1>',lambda event,r=row,c=col:self.reveal(r,c))
                button.bind('<Button-3>',lambda event,r=row,c=col:self.mark(r,c))
                self.buttons[(row,col)]=button
        for i in range(self.no_of_cells):
            self.button_frame.grid_columnconfigure(i,weight=1)
            self.button_frame.grid_rowconfigure(i,weight=1)
    def place_mines(self):
        mine_count=self.no_of_mines
        positions=[(r,c) for r in range(self.no_of_cells) for c in range(self.no_of_cells)]
        mines=random.sample(positions,mine_count)
        for (r,c) in mines:
            self.grid[r][c]=-1
            for i in range(r-1,r+2):
                for j in range(c-1,c+2):
                    if 0<=i<self.no_of_cells and 0<=j<self.no_of_cells and self.grid[i][j]!=-1:
                        self.grid[i][j]+=1
    def reveal(self,row,col):
        button = self.buttons[(row,col)]
        if button.cget("bg")!="gray":
            return
        if self.grid[row][col]==-1:
            button.config(bg="red")
            self.show_game_end_window("YOU LOSE")
        else:
            button.config(bg="white",text=self.grid[row][col])
            if self.grid[row][col]==0:
                self.reveal_adjacent(row,col)
    def mark(self,row,col):
        button=self.buttons[(row,col)]
        if button.cget("bg")=="gray":
            button.config(bg="yellow",text="M")
            self.marked_mines.add((row,col))
        elif button.cget("bg")=="yellow":
            button.config(bg="gray",text="")
            self.marked_mines.remove((row,col))
        self.check_win_condition()
    def reveal_adjacent(self,row,col):
        for i in range(row-1,row+2):
            for j in range(col-1,col+2):
                if 0<=i<self.no_of_cells and 0<=j<self.no_of_cells and(i,j)!=(row,col):
                    if self.buttons[(i,j)].cget("bg")=="gray":
                        self.reveal(i,j)
    def check_win_condition(self):
        mine_positions={(r,c) for r in range(self.no_of_cells) for c in range(self.no_of_cells) if self.grid[r][c]==-1}
        if mine_positions==self.marked_mines:
            self.show_game_end_window("YOU WIN")
    def show_game_end_window(self,message):
        game_end_window=tk.Tk()
        game_end_window.title("GAME ENDED")
        window_width=320
        window_height=200
        screen_width=game_end_window.winfo_screenwidth()
        screen_height=game_end_window.winfo_screenheight()
        position_top=int(screen_height/2-window_height/2)
        position_right=int(screen_width/2-window_width/2)
        game_end_window.geometry(f'{window_width}x{window_height}+{position_right}+{position_top}')
        message_label=tk.Message(game_end_window,text=message)
        message_label.pack(pady=30)
        button_main_menu=tk.Button(game_end_window,text="MAIN MENU",command=self.return_to_menu)
        button_main_menu.pack(pady=10)
        button_exit=tk.Button(game_end_window,text="Exit",command=self.on_exit)
        button_exit.pack(pady=10)
        game_end_window.mainloop()
    def return_to_menu(self):
        self.root.destroy()
        self.on_game_end()
    def on_exit(self):
        self.root.destroy()
if __name__=="__main__":
    pass